// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"simple-admin-user-rpc/gen/internal/logic/base"
	"simple-admin-user-rpc/gen/internal/logic/user"
	"simple-admin-user-rpc/gen/internal/svc"
	"simple-admin-user-rpc/types/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) InitDatabase(ctx context.Context, in *user.Empty) (*user.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// User management
func (s *UserServer) CreateUser(ctx context.Context, in *user.UserInfo) (*user.BaseIDResp, error) {
	l := user.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *user.UserInfo) (*user.BaseResp, error) {
	l := user.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) GetUserList(ctx context.Context, in *user.UserListReq) (*user.UserListResp, error) {
	l := user.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *user.IDReq) (*user.UserInfo, error) {
	l := user.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *user.IDsReq) (*user.BaseResp, error) {
	l := user.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServer) GetUserByOpenpid(ctx context.Context, in *user.OpenpidReq) (*user.UserInfo, error) {
	l := user.NewGetUserByOpenpidLogic(ctx, s.svcCtx)
	return l.GetUserByOpenpid(in)
}
